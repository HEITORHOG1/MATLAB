% ========================================================================
% VALIDAR TABELA DE CONFIGURA√á√ïES DE TREINAMENTO
% ========================================================================
% 
% AUTOR: Heitor Oliveira Gon√ßalves
% LinkedIn: https://www.linkedin.com/in/heitorhog/
% Data: Agosto 2025
% Vers√£o: 1.0
%
% DESCRI√á√ÉO:
%   Script de valida√ß√£o para verificar se a Tabela 2 de configura√ß√µes
%   de treinamento atende a todos os requisitos da Task 19
%
% TASK: 19. Criar tabela 2: Configura√ß√µes de treinamento
% REQUIREMENTS: 6.5
% ========================================================================

clear; clc;

fprintf('========================================================================\n');
fprintf('VALIDA√á√ÉO DA TABELA DE CONFIGURA√á√ïES DE TREINAMENTO\n');
fprintf('========================================================================\n\n');

% Verificar se arquivos necess√°rios existem
fprintf('üîç Verificando arquivos necess√°rios...\n');

arquivos_necessarios = {
    'src/validation/GeradorTabelaConfiguracoes.m';
    'gerar_tabela_configuracoes.m'
};

todos_presentes = true;
for i = 1:length(arquivos_necessarios)
    if exist(arquivos_necessarios{i}, 'file')
        fprintf('   ‚úÖ %s\n', arquivos_necessarios{i});
    else
        fprintf('   ‚ùå %s\n', arquivos_necessarios{i});
        todos_presentes = false;
    end
end

if ~todos_presentes
    fprintf('\n‚ùå Alguns arquivos necess√°rios n√£o foram encontrados.\n');
    fprintf('Execute primeiro: gerar_tabela_configuracoes\n');
    return;
end

% Executar gera√ß√£o da tabela
fprintf('\nüöÄ Executando gera√ß√£o da tabela...\n');

try
    % Adicionar caminhos
    addpath(genpath('src'));
    
    % Executar script principal
    run('gerar_tabela_configuracoes.m');
    
    fprintf('\n‚úÖ Gera√ß√£o executada com sucesso!\n');
    
catch ME
    fprintf('\n‚ùå Erro na execu√ß√£o: %s\n', ME.message);
    return;
end

% Validar arquivos de sa√≠da
fprintf('\nüìã Validando arquivos de sa√≠da...\n');

arquivos_saida = {
    'tabelas/tabela_configuracoes_treinamento.tex';
    'tabelas/configuracoes_treinamento.txt';
    'tabelas/relatorio_tabela_configuracoes.txt'
};

arquivos_ok = true;
for i = 1:length(arquivos_saida)
    if exist(arquivos_saida{i}, 'file')
        fprintf('   ‚úÖ %s\n', arquivos_saida{i});
    else
        fprintf('   ‚ùå %s\n', arquivos_saida{i});
        arquivos_ok = false;
    end
end

% Validar conte√∫do da tabela LaTeX
fprintf('\nüìù Validando conte√∫do da tabela LaTeX...\n');

if exist('tabelas/tabela_configuracoes_treinamento.tex', 'file')
    try
        conteudo = fileread('tabelas/tabela_configuracoes_treinamento.tex');
        
        % Elementos obrigat√≥rios da tabela
        elementos_obrigatorios = {
            '\\begin{table}', 'In√≠cio da tabela';
            '\\caption{', 'Caption da tabela';
            '\\label{tab:configuracoes_treinamento}', 'Label da tabela';
            '\\begin{tabular}', 'In√≠cio do tabular';
            'U-Net', 'Coluna U-Net';
            'Attention U-Net', 'Coluna Attention U-Net';
            'Arquitetura da Rede', 'Se√ß√£o de arquitetura';
            'Hiperpar√¢metros de Treinamento', 'Se√ß√£o de hiperpar√¢metros';
            'Configura√ß√£o do Dataset', 'Se√ß√£o do dataset';
            'Especifica√ß√µes de Hardware', 'Se√ß√£o de hardware';
            'Ambiente de Software', 'Se√ß√£o de software';
            'adam', 'Otimizador Adam';
            '0.001', 'Learning rate';
            '50', 'N√∫mero de √©pocas';
            '8', 'Batch size';
            '414', 'Total de imagens';
            'Intel Core', 'Especifica√ß√£o de CPU';
            'GB', 'Especifica√ß√£o de mem√≥ria';
            'MATLAB', 'Software utilizado';
            '\\end{tabular}', 'Fim do tabular';
            '\\end{table}', 'Fim da tabela'
        };
        
        elementos_encontrados = 0;
        for i = 1:size(elementos_obrigatorios, 1)
            elemento = elementos_obrigatorios{i, 1};
            descricao = elementos_obrigatorios{i, 2};
            
            if contains(conteudo, elemento)
                fprintf('   ‚úÖ %s\n', descricao);
                elementos_encontrados = elementos_encontrados + 1;
            else
                fprintf('   ‚ùå %s (n√£o encontrado: %s)\n', descricao, elemento);
            end
        end
        
        percentual = (elementos_encontrados / size(elementos_obrigatorios, 1)) * 100;
        fprintf('\n   üìä Elementos encontrados: %.1f%% (%d/%d)\n', ...
                percentual, elementos_encontrados, size(elementos_obrigatorios, 1));
        
        if percentual >= 90
            fprintf('   ‚úÖ Conte√∫do da tabela LaTeX validado com sucesso!\n');
        else
            fprintf('   ‚ö†Ô∏è Alguns elementos esperados n√£o foram encontrados na tabela.\n');
        end
        
    catch ME
        fprintf('   ‚ùå Erro ao validar conte√∫do LaTeX: %s\n', ME.message);
    end
else
    fprintf('   ‚ùå Arquivo LaTeX n√£o encontrado\n');
end

% Validar conte√∫do do arquivo de texto
fprintf('\nüìÑ Validando arquivo de texto...\n');

if exist('tabelas/configuracoes_treinamento.txt', 'file')
    try
        conteudo_txt = fileread('tabelas/configuracoes_treinamento.txt');
        
        secoes_esperadas = {
            'ARQUITETURA DA REDE';
            'HIPERPAR√ÇMETROS DE TREINAMENTO';
            'CONFIGURA√á√ÉO DO DATASET';
            'ESPECIFICA√á√ïES DE HARDWARE';
            'AMBIENTE DE SOFTWARE'
        };
        
        secoes_encontradas = 0;
        for i = 1:length(secoes_esperadas)
            if contains(conteudo_txt, secoes_esperadas{i})
                fprintf('   ‚úÖ %s\n', secoes_esperadas{i});
                secoes_encontradas = secoes_encontradas + 1;
            else
                fprintf('   ‚ùå %s\n', secoes_esperadas{i});
            end
        end
        
        if secoes_encontradas == length(secoes_esperadas)
            fprintf('   ‚úÖ Arquivo de texto validado com sucesso!\n');
        else
            fprintf('   ‚ö†Ô∏è Algumas se√ß√µes esperadas n√£o foram encontradas.\n');
        end
        
    catch ME
        fprintf('   ‚ùå Erro ao validar arquivo de texto: %s\n', ME.message);
    end
else
    fprintf('   ‚ùå Arquivo de texto n√£o encontrado\n');
end

% Validar classe GeradorTabelaConfiguracoes
fprintf('\nüîß Validando classe GeradorTabelaConfiguracoes...\n');

if exist('src/validation/GeradorTabelaConfiguracoes.m', 'file')
    try
        conteudo_classe = fileread('src/validation/GeradorTabelaConfiguracoes.m');
        
        metodos_esperados = {
            'gerarTabelaCompleta', 'M√©todo principal de gera√ß√£o';
            'extrairConfiguracoesTreinamento', 'Extra√ß√£o de configura√ß√µes';
            'detectarHardware', 'Detec√ß√£o de hardware';
            'caracterizarAmbiente', 'Caracteriza√ß√£o do ambiente';
            'gerarTabelaLatex', 'Gera√ß√£o da tabela LaTeX';
            'gerarTabelaTexto', 'Gera√ß√£o da tabela em texto';
            'validarCompletude', 'Valida√ß√£o de completude';
            'gerarRelatorio', 'Gera√ß√£o de relat√≥rio'
        };
        
        metodos_encontrados = 0;
        for i = 1:size(metodos_esperados, 1)
            metodo = metodos_esperados{i, 1};
            descricao = metodos_esperados{i, 2};
            
            if contains(conteudo_classe, ['function ' metodo]) || contains(conteudo_classe, [metodo '('])
                fprintf('   ‚úÖ %s\n', descricao);
                metodos_encontrados = metodos_encontrados + 1;
            else
                fprintf('   ‚ùå %s\n', descricao);
            end
        end
        
        if metodos_encontrados == size(metodos_esperados, 1)
            fprintf('   ‚úÖ Classe GeradorTabelaConfiguracoes validada com sucesso!\n');
        else
            fprintf('   ‚ö†Ô∏è Alguns m√©todos esperados n√£o foram encontrados.\n');
        end
        
    catch ME
        fprintf('   ‚ùå Erro ao validar classe: %s\n', ME.message);
    end
else
    fprintf('   ‚ùå Classe GeradorTabelaConfiguracoes n√£o encontrada\n');
end

% Verificar requisitos da Task 19
fprintf('\nüéØ Verificando requisitos da Task 19...\n');

requisitos = {
    'Desenvolver tabela com hiperpar√¢metros e configura√ß√µes t√©cnicas';
    'Incluir hardware utilizado e tempo de processamento';
    'Especificar localiza√ß√£o: Se√ß√£o Metodologia';
    'Atender Requirements: 6.5'
};

requisitos_atendidos = {
    exist('tabelas/tabela_configuracoes_treinamento.tex', 'file') && ...
    (exist('tabelas/configuracoes_treinamento.txt', 'file') && ...
     contains(fileread('tabelas/configuracoes_treinamento.txt'), 'HIPERPAR√ÇMETROS'));
    
    exist('tabelas/configuracoes_treinamento.txt', 'file') && ...
    contains(fileread('tabelas/configuracoes_treinamento.txt'), 'HARDWARE');
    
    exist('tabelas/tabela_configuracoes_treinamento.tex', 'file') && ...
    contains(fileread('tabelas/tabela_configuracoes_treinamento.tex'), 'caption');
    
    exist('tabelas/tabela_configuracoes_treinamento.tex', 'file')
};

requisitos_ok = true;
for i = 1:length(requisitos)
    if requisitos_atendidos{i}
        fprintf('   ‚úÖ %s\n', requisitos{i});
    else
        fprintf('   ‚ùå %s\n', requisitos{i});
        requisitos_ok = false;
    end
end

% Resumo final
fprintf('\n========================================================================\n');
fprintf('RESUMO DA VALIDA√á√ÉO\n');
fprintf('========================================================================\n\n');

if arquivos_ok && requisitos_ok
    fprintf('Status: ‚úÖ VALIDA√á√ÉO COMPLETA\n');
    fprintf('A Tabela 2 de configura√ß√µes de treinamento foi gerada com sucesso\n');
    fprintf('e atende a todos os requisitos da Task 19.\n\n');
    
    fprintf('üìã ARQUIVOS GERADOS:\n');
    fprintf('1. tabelas/tabela_configuracoes_treinamento.tex - Tabela LaTeX para artigo\n');
    fprintf('2. tabelas/configuracoes_treinamento.txt - Vers√£o leg√≠vel em texto\n');
    fprintf('3. tabelas/relatorio_tabela_configuracoes.txt - Relat√≥rio detalhado\n\n');
    
    fprintf('üéØ TASK 19 COMPLETADA!\n');
    fprintf('A tabela est√° pronta para integra√ß√£o no artigo cient√≠fico.\n');
    
else
    fprintf('Status: ‚ö†Ô∏è VALIDA√á√ÉO PARCIAL\n');
    if ~arquivos_ok
        fprintf('Alguns arquivos de sa√≠da n√£o foram encontrados.\n');
    end
    if ~requisitos_ok
        fprintf('Alguns requisitos da task n√£o foram atendidos.\n');
    end
    fprintf('Revise os problemas identificados acima.\n');
end

fprintf('\n========================================================================\n');