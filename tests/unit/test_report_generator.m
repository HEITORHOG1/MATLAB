function test_report_generator()
    % ========================================================================
    % TEST_REPORT_GENERATOR - Testes unit√°rios para a classe ReportGenerator
    % ========================================================================
    % 
    % DESCRI√á√ÉO:
    %   Testa as funcionalidades principais da classe ReportGenerator
    %
    % USO:
    %   >> test_report_generator()
    %
    % ========================================================================
    
    fprintf('üß™ Iniciando testes da classe ReportGenerator...\n');
    
    try
        % Teste 1: Construtor
        fprintf('üìã Teste 1: Construtor da classe...\n');
        generator = ReportGenerator('OutputDir', 'output/test_reports', 'ReportFormat', 'text');
        assert(isa(generator, 'ReportGenerator'), 'Falha na cria√ß√£o do objeto ReportGenerator');
        fprintf('‚úÖ Construtor funcionando corretamente\n');
        
        % Teste 2: Dados de teste
        fprintf('üìã Teste 2: Preparando dados de teste...\n');
        results = createTestResults();
        assert(isstruct(results), 'Falha na cria√ß√£o dos dados de teste');
        fprintf('‚úÖ Dados de teste criados\n');
        
        % Teste 3: Interpreta√ß√£o autom√°tica
        fprintf('üìã Teste 3: Testando interpreta√ß√£o autom√°tica...\n');
        interpretation = generator.generateAutomaticInterpretation(results);
        assert(isstruct(interpretation), 'Falha na interpreta√ß√£o autom√°tica');
        fprintf('‚úÖ Interpreta√ß√£o autom√°tica funcionando\n');
        
        % Teste 4: Gera√ß√£o de recomenda√ß√µes
        fprintf('üìã Teste 4: Testando gera√ß√£o de recomenda√ß√µes...\n');
        recommendations = generator.generateRecommendations(results, interpretation);
        assert(isstruct(recommendations), 'Falha na gera√ß√£o de recomenda√ß√µes');
        fprintf('‚úÖ Recomenda√ß√µes geradas com sucesso\n');
        
        % Teste 5: Relat√≥rio de compara√ß√£o
        fprintf('üìã Teste 5: Testando relat√≥rio de compara√ß√£o...\n');
        reportPath = generator.generateComparisonReport(results, 'Title', 'Teste de Relat√≥rio');
        if ~isempty(reportPath) && exist(reportPath, 'file')
            fprintf('‚úÖ Relat√≥rio de compara√ß√£o gerado: %s\n', reportPath);
        else
            fprintf('‚ö†Ô∏è Relat√≥rio n√£o foi gerado ou n√£o foi encontrado\n');
        end
        
        % Teste 6: Exporta√ß√£o para CSV
        fprintf('üìã Teste 6: Testando exporta√ß√£o para CSV...\n');
        csvPath = generator.exportToScientificFormat(results, 'csv', 'IncludeRawData', false);
        if ~isempty(csvPath) && exist(csvPath, 'file')
            fprintf('‚úÖ Exporta√ß√£o CSV realizada: %s\n', csvPath);
        else
            fprintf('‚ö†Ô∏è Exporta√ß√£o CSV falhou\n');
        end
        
        % Teste 7: Exporta√ß√£o para JSON
        fprintf('üìã Teste 7: Testando exporta√ß√£o para JSON...\n');
        jsonPath = generator.exportToScientificFormat(results, 'json', 'IncludeRawData', false);
        if ~isempty(jsonPath) && exist(jsonPath, 'file')
            fprintf('‚úÖ Exporta√ß√£o JSON realizada: %s\n', jsonPath);
        else
            fprintf('‚ö†Ô∏è Exporta√ß√£o JSON falhou\n');
        end
        
        % Teste 8: Relat√≥rio HTML
        fprintf('üìã Teste 8: Testando relat√≥rio HTML...\n');
        htmlPath = generator.generateHTMLReport(results, 'Title', 'Teste HTML');
        if ~isempty(htmlPath) && exist(htmlPath, 'file')
            fprintf('‚úÖ Relat√≥rio HTML gerado: %s\n', htmlPath);
        else
            fprintf('‚ö†Ô∏è Relat√≥rio HTML falhou\n');
        end
        
        fprintf('üéâ Todos os testes da classe ReportGenerator conclu√≠dos com sucesso!\n');
        
    catch ME
        fprintf('‚ùå Erro durante os testes: %s\n', ME.message);
        fprintf('üìç Arquivo: %s, Linha: %d\n', ME.stack(1).file, ME.stack(1).line);
    end
end

function results = createTestResults()
    % Cria dados de teste para os resultados
    
    % M√©tricas U-Net
    results.models.unet.metrics.iou.mean = 0.75;
    results.models.unet.metrics.iou.std = 0.08;
    results.models.unet.metrics.iou.min = 0.60;
    results.models.unet.metrics.iou.max = 0.90;
    results.models.unet.metrics.iou.values = 0.75 + 0.08 * randn(50, 1);
    
    results.models.unet.metrics.dice.mean = 0.80;
    results.models.unet.metrics.dice.std = 0.07;
    results.models.unet.metrics.dice.min = 0.65;
    results.models.unet.metrics.dice.max = 0.92;
    results.models.unet.metrics.dice.values = 0.80 + 0.07 * randn(50, 1);
    
    results.models.unet.metrics.accuracy.mean = 0.85;
    results.models.unet.metrics.accuracy.std = 0.05;
    results.models.unet.metrics.accuracy.min = 0.75;
    results.models.unet.metrics.accuracy.max = 0.95;
    results.models.unet.metrics.accuracy.values = 0.85 + 0.05 * randn(50, 1);
    
    results.models.unet.metrics.numSamples = 50;
    
    % M√©tricas Attention U-Net
    results.models.attentionUnet.metrics.iou.mean = 0.78;
    results.models.attentionUnet.metrics.iou.std = 0.07;
    results.models.attentionUnet.metrics.iou.min = 0.65;
    results.models.attentionUnet.metrics.iou.max = 0.92;
    results.models.attentionUnet.metrics.iou.values = 0.78 + 0.07 * randn(50, 1);
    
    results.models.attentionUnet.metrics.dice.mean = 0.82;
    results.models.attentionUnet.metrics.dice.std = 0.06;
    results.models.attentionUnet.metrics.dice.min = 0.70;
    results.models.attentionUnet.metrics.dice.max = 0.94;
    results.models.attentionUnet.metrics.dice.values = 0.82 + 0.06 * randn(50, 1);
    
    results.models.attentionUnet.metrics.accuracy.mean = 0.87;
    results.models.attentionUnet.metrics.accuracy.std = 0.04;
    results.models.attentionUnet.metrics.accuracy.min = 0.78;
    results.models.attentionUnet.metrics.accuracy.max = 0.96;
    results.models.attentionUnet.metrics.accuracy.values = 0.87 + 0.04 * randn(50, 1);
    
    results.models.attentionUnet.metrics.numSamples = 50;
    
    % Dados estat√≠sticos
    results.statistical.iou.pValue = 0.03;
    results.statistical.iou.significant = true;
    results.statistical.iou.effectSize = 0.4;
    
    results.statistical.dice.pValue = 0.02;
    results.statistical.dice.significant = true;
    results.statistical.dice.effectSize = 0.3;
    
    results.statistical.accuracy.pValue = 0.08;
    results.statistical.accuracy.significant = false;
    results.statistical.accuracy.effectSize = 0.2;
    
    % Informa√ß√µes de execu√ß√£o
    results.execution.timestamp = datestr(now);
    results.execution.quickTest.enabled = false;
    results.execution.totalTime = 1800; % 30 minutos
end