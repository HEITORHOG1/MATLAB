function success = install_system()
    % ========================================================================
    % INSTALL_SYSTEM - INSTALA√á√ÉO AUTOM√ÅTICA DO SISTEMA
    % ========================================================================
    % 
    % AUTOR: Sistema de Compara√ß√£o U-Net vs Attention U-Net
    % Data: Julho 2025
    % Vers√£o: 2.0
    %
    % DESCRI√á√ÉO:
    %   Script de instala√ß√£o autom√°tica que verifica requisitos, configura
    %   o ambiente e prepara o sistema para uso.
    %
    % TUTORIAL MATLAB REFER√äNCIA:
    %   https://www.mathworks.com/support/learn-with-matlab-tutorials.html
    %   - System Administration
    %   - Path Management
    %   - Installation Procedures
    %
    % USO:
    %   >> success = install_system();
    %
    % REQUISITOS: 2.1, 2.2
    % ========================================================================
    
    success = false;
    
    try
        fprintf('\n');
        fprintf('========================================================================\n');
        fprintf('                    INSTALA√á√ÉO DO SISTEMA                              \n');
        fprintf('                   U-Net vs Attention U-Net v2.0                      \n');
        fprintf('========================================================================\n');
        fprintf('\n');
        
        % Verificar se j√° est√° instalado
        if exist('VERSION.mat', 'file')
            versionData = load('VERSION.mat');
            if isfield(versionData, 'versionInfo')
                fprintf('‚ö†Ô∏è  Sistema j√° instalado (vers√£o %s)\n', versionData.versionInfo.version);
                
                choice = input('Deseja reinstalar? (s/n) [n]: ', 's');
                if isempty(choice) || lower(choice) ~= 's'
                    fprintf('Instala√ß√£o cancelada.\n');
                    return;
                end
                
                fprintf('\nüîÑ Reinstalando sistema...\n\n');
            end
        end
        
        % Etapa 1: Verificar requisitos do sistema
        fprintf('üîç Verificando requisitos do sistema...\n');
        if ~checkSystemRequirements()
            fprintf('‚ùå Requisitos do sistema n√£o atendidos.\n');
            return;
        end
        fprintf('‚úÖ Requisitos do sistema verificados\n\n');
        
        % Etapa 2: Verificar toolboxes
        fprintf('üì¶ Verificando toolboxes do MATLAB...\n');
        if ~checkMatlabToolboxes()
            fprintf('‚ùå Toolboxes necess√°rias n√£o encontradas.\n');
            return;
        end
        fprintf('‚úÖ Toolboxes verificadas\n\n');
        
        % Etapa 3: Criar estrutura de diret√≥rios
        fprintf('üìÅ Criando estrutura de diret√≥rios...\n');
        if ~createDirectoryStructure()
            fprintf('‚ùå Erro ao criar estrutura de diret√≥rios.\n');
            return;
        end
        fprintf('‚úÖ Estrutura de diret√≥rios criada\n\n');
        
        % Etapa 4: Configurar caminhos do MATLAB
        fprintf('üõ§Ô∏è  Configurando caminhos do MATLAB...\n');
        if ~setupMatlabPaths()
            fprintf('‚ùå Erro ao configurar caminhos.\n');
            return;
        end
        fprintf('‚úÖ Caminhos configurados\n\n');
        
        % Etapa 5: Inicializar sistema de vers√£o
        fprintf('üè∑Ô∏è  Inicializando sistema de vers√£o...\n');
        if ~initializeVersionSystem()
            fprintf('‚ùå Erro ao inicializar sistema de vers√£o.\n');
            return;
        end
        fprintf('‚úÖ Sistema de vers√£o inicializado\n\n');
        
        % Etapa 6: Executar testes b√°sicos
        fprintf('üß™ Executando testes b√°sicos...\n');
        if ~runBasicTests()
            fprintf('‚ùå Testes b√°sicos falharam.\n');
            return;
        end
        fprintf('‚úÖ Testes b√°sicos aprovados\n\n');
        
        % Etapa 7: Criar configura√ß√£o inicial
        fprintf('‚öôÔ∏è  Criando configura√ß√£o inicial...\n');
        if ~createInitialConfiguration()
            fprintf('‚ùå Erro ao criar configura√ß√£o inicial.\n');
            return;
        end
        fprintf('‚úÖ Configura√ß√£o inicial criada\n\n');
        
        % Etapa 8: Finalizar instala√ß√£o
        fprintf('üéØ Finalizando instala√ß√£o...\n');
        finalizeInstallation();
        
        fprintf('‚úÖ INSTALA√á√ÉO CONCLU√çDA COM SUCESSO!\n\n');
        
        % Mostrar instru√ß√µes p√≥s-instala√ß√£o
        showPostInstallationInstructions();
        
        success = true;
        
    catch ME
        fprintf('\n‚ùå ERRO CR√çTICO NA INSTALA√á√ÉO: %s\n', ME.message);
        fprintf('Stack trace:\n');
        for i = 1:length(ME.stack)
            fprintf('  %s (linha %d)\n', ME.stack(i).name, ME.stack(i).line);
        end
        
        % Tentar limpeza em caso de erro
        try
            fprintf('\nüßπ Executando limpeza...\n');
            cleanupFailedInstallation();
        catch
            fprintf('‚ö†Ô∏è  N√£o foi poss√≠vel executar limpeza autom√°tica.\n');
        end
    end
    
    fprintf('\n========================================================================\n');
    if success
        fprintf('                        INSTALA√á√ÉO CONCLU√çDA                           \n');
    else
        fprintf('                         INSTALA√á√ÉO FALHOU                             \n');
    end
    fprintf('========================================================================\n\n');
end

function success = checkSystemRequirements()
    % Verifica requisitos b√°sicos do sistema
    
    success = false;
    
    try
        % Verificar vers√£o do MATLAB
        matlabVersion = version('-release');
        matlabYear = str2double(matlabVersion(1:4));
        
        if matlabYear < 2020
            fprintf('‚ùå MATLAB R2020a ou superior necess√°rio (atual: %s)\n', matlabVersion);
            return;
        end
        
        fprintf('‚úì MATLAB %s (compat√≠vel)\n', matlabVersion);
        
        % Verificar mem√≥ria dispon√≠vel
        if ispc
            try
                [~, memInfo] = memory;
                availableMemoryGB = memInfo.PhysicalMemory.Available / (1024^3);
                fprintf('‚úì Mem√≥ria dispon√≠vel: %.1f GB\n', availableMemoryGB);
                
                if availableMemoryGB < 2
                    fprintf('‚ö†Ô∏è  Pouca mem√≥ria dispon√≠vel (< 2GB). Performance pode ser limitada.\n');
                end
            catch
                fprintf('‚ö†Ô∏è  N√£o foi poss√≠vel verificar mem√≥ria dispon√≠vel\n');
            end
        else
            fprintf('‚úì Sistema n√£o-Windows detectado\n');
        end
        
        % Verificar espa√ßo em disco
        try
            dirInfo = dir('.');
            fprintf('‚úì Diret√≥rio de instala√ß√£o acess√≠vel\n');
        catch
            fprintf('‚ùå Erro ao acessar diret√≥rio de instala√ß√£o\n');
            return;
        end
        
        % Verificar permiss√µes de escrita
        testFile = 'install_test.tmp';
        try
            fid = fopen(testFile, 'w');
            if fid ~= -1
                fclose(fid);
                delete(testFile);
                fprintf('‚úì Permiss√µes de escrita verificadas\n');
            else
                fprintf('‚ùå Sem permiss√£o de escrita no diret√≥rio atual\n');
                return;
            end
        catch
            fprintf('‚ùå Erro ao testar permiss√µes de escrita\n');
            return;
        end
        
        success = true;
        
    catch ME
        fprintf('‚ùå Erro na verifica√ß√£o de requisitos: %s\n', ME.message);
    end
end

function success = checkMatlabToolboxes()
    % Verifica toolboxes necess√°rias
    
    success = false;
    
    try
        % Toolboxes obrigat√≥rias
        requiredToolboxes = {
            'Deep_Learning_Toolbox', 'Deep Learning Toolbox';
            'Image_Toolbox', 'Image Processing Toolbox'
        };
        
        % Toolboxes recomendadas
        recommendedToolboxes = {
            'Statistics_Toolbox', 'Statistics and Machine Learning Toolbox';
            'Distrib_Computing_Toolbox', 'Parallel Computing Toolbox'
        };
        
        allRequired = true;
        
        % Verificar toolboxes obrigat√≥rias
        fprintf('Toolboxes obrigat√≥rias:\n');
        for i = 1:size(requiredToolboxes, 1)
            toolboxId = requiredToolboxes{i, 1};
            toolboxName = requiredToolboxes{i, 2};
            
            if license('test', toolboxId)
                fprintf('  ‚úì %s\n', toolboxName);
            else
                fprintf('  ‚ùå %s (OBRIGAT√ìRIA)\n', toolboxName);
                allRequired = false;
            end
        end
        
        if ~allRequired
            fprintf('\n‚ùå Toolboxes obrigat√≥rias ausentes.\n');
            fprintf('   Instale via: Home ‚Üí Add-Ons ‚Üí Get Add-Ons\n');
            return;
        end
        
        % Verificar toolboxes recomendadas
        fprintf('\nToolboxes recomendadas:\n');
        for i = 1:size(recommendedToolboxes, 1)
            toolboxId = recommendedToolboxes{i, 1};
            toolboxName = recommendedToolboxes{i, 2};
            
            if license('test', toolboxId)
                fprintf('  ‚úì %s\n', toolboxName);
            else
                fprintf('  ‚ö†Ô∏è  %s (recomendada para melhor performance)\n', toolboxName);
            end
        end
        
        success = true;
        
    catch ME
        fprintf('‚ùå Erro na verifica√ß√£o de toolboxes: %s\n', ME.message);
    end
end

function success = createDirectoryStructure()
    % Cria estrutura de diret√≥rios necess√°ria
    
    success = false;
    
    try
        % Diret√≥rios principais
        mainDirs = {
            'src',
            'src/core',
            'src/data',
            'src/models',
            'src/evaluation',
            'src/visualization',
            'src/utils',
            'tests',
            'tests/unit',
            'tests/integration',
            'tests/performance',
            'docs',
            'docs/examples',
            'config',
            'output',
            'output/models',
            'output/reports',
            'output/visualizations',
            'output/logs',
            'version_backups'
        };
        
        for i = 1:length(mainDirs)
            dirPath = mainDirs{i};
            
            if ~exist(dirPath, 'dir')
                mkdir(dirPath);
                fprintf('  üìÅ Criado: %s\n', dirPath);
            else
                fprintf('  ‚úì Existe: %s\n', dirPath);
            end
        end
        
        % Criar arquivos README em diret√≥rios principais
        createReadmeFiles();
        
        success = true;
        
    catch ME
        fprintf('‚ùå Erro ao criar diret√≥rios: %s\n', ME.message);
    end
end

function createReadmeFiles()
    % Cria arquivos README em diret√≥rios principais
    
    readmeContents = containers.Map();
    
    readmeContents('src') = {
        '# C√≥digo Fonte';
        '';
        'Este diret√≥rio cont√©m todo o c√≥digo fonte do sistema.';
        '';
        '## Estrutura:';
        '- `core/` - Componentes principais do sistema';
        '- `data/` - Carregamento e preprocessamento de dados';
        '- `models/` - Arquiteturas de modelos e treinamento';
        '- `evaluation/` - M√©tricas e avalia√ß√£o';
        '- `visualization/` - Visualiza√ß√£o e relat√≥rios';
        '- `utils/` - Utilit√°rios e ferramentas auxiliares';
    };
    
    readmeContents('tests') = {
        '# Testes Automatizados';
        '';
        'Este diret√≥rio cont√©m todos os testes do sistema.';
        '';
        '## Estrutura:';
        '- `unit/` - Testes unit√°rios de componentes individuais';
        '- `integration/` - Testes de integra√ß√£o entre componentes';
        '- `performance/` - Testes de performance e benchmarking';
    };
    
    readmeContents('docs') = {
        '# Documenta√ß√£o';
        '';
        'Este diret√≥rio cont√©m a documenta√ß√£o do sistema.';
        '';
        '## Arquivos:';
        '- `user_guide.md` - Guia detalhado do usu√°rio';
        '- `api_reference.md` - Refer√™ncia da API';
        '- `examples/` - Exemplos pr√°ticos de uso';
    };
    
    readmeContents('output') = {
        '# Resultados e Sa√≠das';
        '';
        'Este diret√≥rio cont√©m todos os resultados gerados pelo sistema.';
        '';
        '## Estrutura:';
        '- `models/` - Modelos treinados salvos';
        '- `reports/` - Relat√≥rios de compara√ß√£o';
        '- `visualizations/` - Gr√°ficos e visualiza√ß√µes';
        '- `logs/` - Arquivos de log do sistema';
    };
    
    % Criar arquivos README
    dirs = keys(readmeContents);
    for i = 1:length(dirs)
        dirName = dirs{i};
        content = readmeContents(dirName);
        
        readmeFile = fullfile(dirName, 'README.md');
        
        try
            fid = fopen(readmeFile, 'w');
            if fid ~= -1
                for j = 1:length(content)
                    fprintf(fid, '%s\n', content{j});
                end
                fclose(fid);
            end
        catch
            % Ignorar erros na cria√ß√£o de README
        end
    end
end

function success = setupMatlabPaths()
    % Configura caminhos do MATLAB
    
    success = false;
    
    try
        % Adicionar caminhos principais
        pathsToAdd = {
            'src/core',
            'src/data',
            'src/models',
            'src/evaluation',
            'src/visualization',
            'src/utils',
            'tests',
            'tests/unit',
            'tests/integration',
            'tests/performance'
        };
        
        for i = 1:length(pathsToAdd)
            pathToAdd = pathsToAdd{i};
            
            if exist(pathToAdd, 'dir')
                addpath(pathToAdd);
                fprintf('  ‚úì Adicionado ao path: %s\n', pathToAdd);
            end
        end
        
        % Salvar caminhos (opcional)
        try
            savepath;
            fprintf('  ‚úì Caminhos salvos permanentemente\n');
        catch
            fprintf('  ‚ö†Ô∏è  N√£o foi poss√≠vel salvar caminhos permanentemente\n');
            fprintf('     Execute setup_paths() no in√≠cio de cada sess√£o\n');
        end
        
        success = true;
        
    catch ME
        fprintf('‚ùå Erro ao configurar caminhos: %s\n', ME.message);
    end
end

function success = initializeVersionSystem()
    % Inicializa sistema de vers√£o
    
    success = false;
    
    try
        % Verificar se VersionManager existe
        if exist('src/utils/VersionManager.m', 'file')
            % Criar inst√¢ncia do VersionManager
            versionMgr = VersionManager();
            
            % Obter informa√ß√µes da vers√£o
            versionInfo = versionMgr.getCurrentVersion();
            
            fprintf('  ‚úì Sistema de vers√£o inicializado (v%s)\n', versionInfo.version);
            success = true;
        else
            fprintf('  ‚ö†Ô∏è  VersionManager n√£o encontrado, criando vers√£o b√°sica\n');
            
            % Criar informa√ß√£o b√°sica de vers√£o
            versionInfo = struct();
            versionInfo.version = '2.0.0';
            versionInfo.releaseDate = datestr(now, 'yyyy-mm-dd');
            versionInfo.releaseType = 'major';
            versionInfo.buildNumber = sprintf('%s.%d', datestr(now, 'yyyymmdd'), round(now * 86400));
            
            save('VERSION.mat', 'versionInfo');
            fprintf('  ‚úì Vers√£o b√°sica criada\n');
            success = true;
        end
        
    catch ME
        fprintf('‚ùå Erro ao inicializar sistema de vers√£o: %s\n', ME.message);
    end
end

function success = runBasicTests()
    % Executa testes b√°sicos de funcionamento
    
    success = false;
    
    try
        fprintf('  üß™ Testando carregamento de classes principais...\n');
        
        % Testar ConfigManager
        try
            if exist('src/core/ConfigManager.m', 'file')
                configMgr = ConfigManager();
                fprintf('    ‚úì ConfigManager\n');
            else
                fprintf('    ‚ö†Ô∏è  ConfigManager n√£o encontrado\n');
            end
        catch
            fprintf('    ‚ùå ConfigManager falhou\n');
        end
        
        % Testar MainInterface
        try
            if exist('src/core/MainInterface.m', 'file')
                mainInterface = MainInterface();
                fprintf('    ‚úì MainInterface\n');
            else
                fprintf('    ‚ö†Ô∏è  MainInterface n√£o encontrado\n');
            end
        catch
            fprintf('    ‚ùå MainInterface falhou\n');
        end
        
        % Testar DataLoader
        try
            if exist('src/data/DataLoader.m', 'file')
                dataLoader = DataLoader();
                fprintf('    ‚úì DataLoader\n');
            else
                fprintf('    ‚ö†Ô∏è  DataLoader n√£o encontrado\n');
            end
        catch
            fprintf('    ‚ùå DataLoader falhou\n');
        end
        
        fprintf('  ‚úì Testes b√°sicos conclu√≠dos\n');
        success = true;
        
    catch ME
        fprintf('‚ùå Erro nos testes b√°sicos: %s\n', ME.message);
    end
end

function success = createInitialConfiguration()
    % Cria configura√ß√£o inicial do sistema
    
    success = false;
    
    try
        % Verificar se j√° existe configura√ß√£o
        if exist('config_caminhos.mat', 'file')
            fprintf('  ‚úì Configura√ß√£o existente encontrada\n');
            success = true;
            return;
        end
        
        % Criar configura√ß√£o padr√£o
        config = struct();
        
        % Tentar detectar dados de exemplo
        if exist('img/original', 'dir') && exist('img/masks', 'dir')
            config.imageDir = fullfile(pwd, 'img', 'original');
            config.maskDir = fullfile(pwd, 'img', 'masks');
            fprintf('  ‚úì Dados de exemplo detectados\n');
        else
            config.imageDir = '';
            config.maskDir = '';
            fprintf('  ‚ö†Ô∏è  Dados de exemplo n√£o encontrados\n');
        end
        
        % Configura√ß√µes padr√£o
        config.inputSize = [256, 256, 3];
        config.numClasses = 2;
        config.validationSplit = 0.2;
        config.miniBatchSize = 8;
        config.maxEpochs = 20;
        
        % Configura√ß√µes de teste r√°pido
        config.quickTest = struct();
        config.quickTest.numSamples = 50;
        config.quickTest.maxEpochs = 5;
        
        % Configura√ß√µes de sa√≠da
        config.outputDir = fullfile(pwd, 'output');
        
        % Informa√ß√µes do ambiente
        config.environment = struct();
        config.environment.username = getenv('USERNAME');
        config.environment.computername = getenv('COMPUTERNAME');
        config.environment.matlabVersion = version;
        config.environment.installDate = datestr(now);
        
        % Salvar configura√ß√£o
        save('config_caminhos.mat', 'config');
        fprintf('  ‚úì Configura√ß√£o inicial criada\n');
        
        success = true;
        
    catch ME
        fprintf('‚ùå Erro ao criar configura√ß√£o: %s\n', ME.message);
    end
end

function finalizeInstallation()
    % Finaliza processo de instala√ß√£o
    
    try
        % Criar arquivo de status da instala√ß√£o
        installStatus = struct();
        installStatus.completed = true;
        installStatus.version = '2.0.0';
        installStatus.installDate = datestr(now);
        installStatus.installer = getenv('USERNAME');
        installStatus.computer = getenv('COMPUTERNAME');
        
        save('INSTALL_STATUS.mat', 'installStatus');
        
        % Criar script de configura√ß√£o de caminhos
        createSetupPathsScript();
        
        fprintf('  ‚úì Instala√ß√£o finalizada\n');
        
    catch ME
        fprintf('‚ö†Ô∏è  Erro ao finalizar instala√ß√£o: %s\n', ME.message);
    end
end

function createSetupPathsScript()
    % Cria script para configurar caminhos
    
    try
        fid = fopen('setup_paths.m', 'w');
        if fid == -1
            return;
        end
        
        fprintf(fid, 'function setup_paths()\n');
        fprintf(fid, '%% SETUP_PATHS - Configura caminhos do sistema\n');
        fprintf(fid, '%% Execute este script no in√≠cio de cada sess√£o se os caminhos n√£o foram salvos permanentemente\n\n');
        
        fprintf(fid, 'try\n');
        fprintf(fid, '    %% Adicionar caminhos principais\n');
        fprintf(fid, '    addpath(''src/core'');\n');
        fprintf(fid, '    addpath(''src/data'');\n');
        fprintf(fid, '    addpath(''src/models'');\n');
        fprintf(fid, '    addpath(''src/evaluation'');\n');
        fprintf(fid, '    addpath(''src/visualization'');\n');
        fprintf(fid, '    addpath(''src/utils'');\n');
        fprintf(fid, '    addpath(''tests'');\n');
        fprintf(fid, '    addpath(''tests/unit'');\n');
        fprintf(fid, '    addpath(''tests/integration'');\n');
        fprintf(fid, '    addpath(''tests/performance'');\n\n');
        
        fprintf(fid, '    fprintf(''‚úÖ Caminhos configurados com sucesso\\n'');\n');
        fprintf(fid, 'catch ME\n');
        fprintf(fid, '    fprintf(''‚ùå Erro ao configurar caminhos: %%s\\n'', ME.message);\n');
        fprintf(fid, 'end\n');
        fprintf(fid, 'end\n');
        
        fclose(fid);
        
    catch
        % Ignorar erros na cria√ß√£o do script
    end
end

function cleanupFailedInstallation()
    % Limpa arquivos de instala√ß√£o falhada
    
    try
        % Remover arquivos tempor√°rios
        tempFiles = {
            'install_test.tmp',
            'INSTALL_STATUS.mat',
            'VERSION.mat'
        };
        
        for i = 1:length(tempFiles)
            if exist(tempFiles{i}, 'file')
                delete(tempFiles{i});
            end
        end
        
        fprintf('‚úì Limpeza conclu√≠da\n');
        
    catch
        % Ignorar erros de limpeza
    end
end

function showPostInstallationInstructions()
    % Mostra instru√ß√µes p√≥s-instala√ß√£o
    
    fprintf('üìã INSTRU√á√ïES P√ìS-INSTALA√á√ÉO:\n\n');
    
    fprintf('1. üéØ COMO USAR O SISTEMA:\n');
    fprintf('   >> mainInterface = MainInterface()\n');
    fprintf('   >> mainInterface.run()\n\n');
    
    fprintf('2. ‚öôÔ∏è  CONFIGURAR SEUS DADOS:\n');
    fprintf('   >> configurar_caminhos()\n');
    fprintf('   (Aponte para suas pastas de imagens e m√°scaras)\n\n');
    
    fprintf('3. üß™ EXECUTAR TESTES COMPLETOS:\n');
    fprintf('   >> executar_testes_completos()\n\n');
    
    fprintf('4. üìö DOCUMENTA√á√ÉO:\n');
    fprintf('   - README.md - Vis√£o geral e in√≠cio r√°pido\n');
    fprintf('   - INSTALLATION.md - Guia de instala√ß√£o detalhado\n');
    fprintf('   - docs/user_guide.md - Guia do usu√°rio\n\n');
    
    fprintf('5. üîß SE ALGO DER ERRADO:\n');
    fprintf('   - Execute: setup_paths() (se caminhos n√£o foram salvos)\n');
    fprintf('   - Consulte logs em output/logs/\n');
    fprintf('   - Execute testes para diagn√≥stico\n\n');
    
    fprintf('6. üìÅ ESTRUTURA DE ARQUIVOS:\n');
    fprintf('   - src/ - C√≥digo fonte\n');
    fprintf('   - tests/ - Testes automatizados\n');
    fprintf('   - docs/ - Documenta√ß√£o\n');
    fprintf('   - output/ - Resultados gerados\n\n');
    
    fprintf('‚ú® Sistema pronto para uso! Comece com mainInterface.run()\n\n');
end