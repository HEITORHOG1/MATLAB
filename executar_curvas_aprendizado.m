function executar_curvas_aprendizado()
    % executar_curvas_aprendizado - Executa a gera√ß√£o da Figura 6: Curvas de Aprendizado
    % 
    % Este script gera as curvas de loss e accuracy durante o treinamento
    % para U-Net e Attention U-Net, conforme especificado no artigo cient√≠fico
    
    fprintf('=== GERA√á√ÉO DE CURVAS DE APRENDIZADO ===\n');
    fprintf('Tarefa 16: Criar figura 6: Curvas de aprendizado\n\n');
    
    try
        % Adicionar caminhos necess√°rios
        addpath('src/visualization');
        
        % Gerar figura completa
        gerar_curvas_aprendizado();
        
        % Validar resultado
        validarCurvasAprendizado();
        
        fprintf('\n‚úÖ EXECU√á√ÉO CONCLU√çDA COM SUCESSO!\n');
        fprintf('üìä Figura gerada: figuras/figura_curvas_aprendizado.svg\n');
        fprintf('üìã Localiza√ß√£o no artigo: Se√ß√£o Resultados (7.2)\n');
        
    catch ME
        fprintf('\n‚ùå ERRO NA EXECU√á√ÉO:\n');
        fprintf('Erro: %s\n', ME.message);
        fprintf('Arquivo: %s (linha %d)\n', ME.stack(1).file, ME.stack(1).line);
        
        % Tentar diagn√≥stico
        diagnosticarProblema();
    end
end

function validarCurvasAprendizado()
    % Valida se a figura foi gerada corretamente
    
    fprintf('\nüîç Validando curvas de aprendizado...\n');
    
    % Verificar se arquivo foi criado
    arquivo_svg = fullfile('figuras', 'figura_curvas_aprendizado.svg');
    arquivo_png = fullfile('figuras', 'figura_curvas_aprendizado.png');
    
    if exist(arquivo_svg, 'file')
        fprintf('‚úÖ Arquivo SVG criado: %s\n', arquivo_svg);
    else
        error('‚ùå Arquivo SVG n√£o foi criado');
    end
    
    if exist(arquivo_png, 'file')
        fprintf('‚úÖ Arquivo PNG criado: %s\n', arquivo_png);
    else
        warning('‚ö†Ô∏è Arquivo PNG n√£o foi criado');
    end
    
    % Verificar tamanho dos arquivos
    info_svg = dir(arquivo_svg);
    if info_svg.bytes > 1000 % Pelo menos 1KB
        fprintf('‚úÖ Arquivo SVG tem tamanho adequado: %.1f KB\n', info_svg.bytes/1024);
    else
        warning('‚ö†Ô∏è Arquivo SVG muito pequeno: %.1f KB', info_svg.bytes/1024);
    end
    
    fprintf('‚úÖ Valida√ß√£o conclu√≠da\n');
end

function diagnosticarProblema()
    % Diagn√≥stica problemas comuns
    
    fprintf('\nüîß Executando diagn√≥stico...\n');
    
    % Verificar se diret√≥rio figuras existe
    if ~exist('figuras', 'dir')
        fprintf('‚ö†Ô∏è Diret√≥rio figuras n√£o existe - ser√° criado\n');
        mkdir('figuras');
    else
        fprintf('‚úÖ Diret√≥rio figuras existe\n');
    end
    
    % Verificar se arquivos de dados existem
    if exist('resultados_comparacao.mat', 'file')
        fprintf('‚úÖ Arquivo resultados_comparacao.mat encontrado\n');
    else
        fprintf('‚ö†Ô∏è Arquivo resultados_comparacao.mat n√£o encontrado - usando dados padr√£o\n');
    end
    
    % Verificar se classe existe
    if exist('src/visualization/GeradorCurvasAprendizado.m', 'file')
        fprintf('‚úÖ Classe GeradorCurvasAprendizado encontrada\n');
    else
        fprintf('‚ùå Classe GeradorCurvasAprendizado n√£o encontrada\n');
    end
    
    % Verificar MATLAB Graphics
    try
        figure('Visible', 'off');
        close;
        fprintf('‚úÖ Sistema gr√°fico MATLAB funcionando\n');
    catch
        fprintf('‚ùå Problema com sistema gr√°fico MATLAB\n');
    end
end