function validate_comparison_controller()
    % ========================================================================
    % VALIDATE_COMPARISON_CONTROLLER - Valida√ß√£o do ComparisonController
    % ========================================================================
    % 
    % DESCRI√á√ÉO:
    %   Script para validar a implementa√ß√£o do ComparisonController e seus
    %   componentes relacionados (ExecutionManager, ReportGenerator).
    %
    % USO:
    %   >> validate_comparison_controller()
    % ========================================================================
    
    fprintf('=== VALIDA√á√ÉO DO COMPARISON CONTROLLER ===\n');
    fprintf('Iniciando valida√ß√£o dos componentes implementados...\n\n');
    
    try
        % 1. Testar inicializa√ß√£o do ComparisonController
        fprintf('1. Testando inicializa√ß√£o do ComparisonController...\n');
        
        % Configura√ß√£o m√≠nima para teste
        config = struct();
        config.imageDir = fullfile(pwd, 'img', 'original');
        config.maskDir = fullfile(pwd, 'img', 'masks');
        config.inputSize = [256, 256, 3];
        config.numClasses = 2;
        config.maxEpochs = 5;  % Reduzido para teste
        config.miniBatchSize = 4;
        config.validationSplit = 0.2;
        config.name = 'Teste ComparisonController';
        
        % Verificar se diret√≥rios existem
        if ~exist(config.imageDir, 'dir') || ~exist(config.maskDir, 'dir')
            fprintf('   ‚ö†Ô∏è  Diret√≥rios de dados n√£o encontrados, usando configura√ß√£o de teste\n');
            config.imageDir = pwd;  % Usar diret√≥rio atual como fallback
            config.maskDir = pwd;
        end
        
        % Inicializar ComparisonController
        controller = ComparisonController(config, 'EnableDetailedLogging', true, ...
            'EnableQuickTest', true, 'QuickTestSampleSize', 10);
        
        fprintf('   ‚úÖ ComparisonController inicializado com sucesso\n');
        
        % 2. Testar status de execu√ß√£o
        fprintf('\n2. Testando status de execu√ß√£o...\n');
        status = controller.getExecutionStatus();
        
        fprintf('   üìä Status atual: %s\n', status.currentStep);
        fprintf('   üìà Progresso: %.1f%%\n', status.progressPercent);
        fprintf('   ‚è±Ô∏è  Tempo decorrido: %.2f segundos\n', status.elapsedTime);
        
        % 3. Testar gera√ß√£o de resumo
        fprintf('\n3. Testando gera√ß√£o de resumo...\n');
        summary = controller.generateExecutionSummary();
        fprintf('   üìã Resumo gerado:\n');
        fprintf('   %s\n', strrep(summary, sprintf('\n'), sprintf('\n   ')));
        
        % 4. Testar ExecutionManager separadamente
        fprintf('\n4. Testando ExecutionManager...\n');
        execManager = ExecutionManager('MaxConcurrentJobs', 1, 'QuickTestRatio', 0.2);
        
        % Testar modo de teste r√°pido
        testData = {{'img1.jpg', 'img2.jpg', 'img3.jpg'}, {'mask1.jpg', 'mask2.jpg', 'mask3.jpg'}};
        optimizedData = execManager.enableQuickTestMode(testData, 'MaxSamples', 2);
        
        fprintf('   ‚úÖ ExecutionManager: Teste r√°pido funcionando\n');
        fprintf('   üìä Dados originais: %d amostras ‚Üí %d amostras\n', ...
            length(testData{1}), length(optimizedData{1}));
        
        % 5. Testar ReportGenerator
        fprintf('\n5. Testando ReportGenerator...\n');
        reportGen = ReportGenerator('OutputDir', fullfile('output', 'test_reports'), ...
            'ReportFormat', 'text');
        
        % Criar dados de teste para relat√≥rio
        testResults = struct();
        testResults.models = struct();
        testResults.models.unet = struct();
        testResults.models.unet.metrics = struct();
        testResults.models.unet.metrics.iou = struct('mean', 0.85, 'std', 0.05, 'values', [0.8, 0.85, 0.9]);
        testResults.models.unet.metrics.dice = struct('mean', 0.82, 'std', 0.04, 'values', [0.78, 0.82, 0.86]);
        testResults.models.unet.metrics.accuracy = struct('mean', 0.88, 'std', 0.03, 'values', [0.85, 0.88, 0.91]);
        testResults.models.unet.metrics.numSamples = 3;
        
        testResults.models.attentionUnet = struct();
        testResults.models.attentionUnet.metrics = struct();
        testResults.models.attentionUnet.metrics.iou = struct('mean', 0.87, 'std', 0.04, 'values', [0.83, 0.87, 0.91]);
        testResults.models.attentionUnet.metrics.dice = struct('mean', 0.84, 'std', 0.03, 'values', [0.81, 0.84, 0.87]);
        testResults.models.attentionUnet.metrics.accuracy = struct('mean', 0.90, 'std', 0.02, 'values', [0.88, 0.90, 0.92]);
        testResults.models.attentionUnet.metrics.numSamples = 3;
        
        testResults.comparison = struct();
        testResults.comparison.winner = 'Attention U-Net';
        testResults.comparison.summary = 'Attention U-Net mostrou melhor performance';
        
        % Gerar interpreta√ß√£o autom√°tica
        interpretation = reportGen.generateAutomaticInterpretation(testResults);
        
        if ~isfield(interpretation, 'error')
            fprintf('   ‚úÖ ReportGenerator: Interpreta√ß√£o autom√°tica gerada\n');
            
            if isfield(interpretation, 'winner')
                fprintf('   üèÜ Modelo vencedor: %s (confian√ßa: %s)\n', ...
                    interpretation.winner.model, interpretation.winner.confidence);
            end
            
            if isfield(interpretation, 'executiveSummary')
                fprintf('   üìã Resumo executivo gerado com sucesso\n');
            end
        else
            fprintf('   ‚ö†Ô∏è  Erro na interpreta√ß√£o: %s\n', interpretation.error);
        end
        
        % 6. Testar ResourceMonitor
        fprintf('\n6. Testando ResourceMonitor...\n');
        resourceMonitor = ResourceMonitor();
        resourceInfo = resourceMonitor.getResourceInfo();
        
        fprintf('   üíæ Mem√≥ria: %.1f GB total, %.1f GB dispon√≠vel\n', ...
            resourceInfo.memory.totalGB, resourceInfo.memory.availableGB);
        fprintf('   üñ•Ô∏è  CPU: %d cores, uso estimado: %.1f%%\n', ...
            resourceInfo.cpu.numCores, resourceInfo.cpu.usage);
        fprintf('   üéÆ GPU: %s\n', resourceInfo.gpu.available ? 'Dispon√≠vel' : 'N√£o dispon√≠vel');
        
        if resourceInfo.gpu.available
            fprintf('   üìä GPU: %s (%.1f GB)\n', resourceInfo.gpu.name, resourceInfo.gpu.memoryGB);
        end
        
        % 7. Testar limpeza
        fprintf('\n7. Testando limpeza de recursos...\n');
        controller.cleanup();
        execManager.cleanup();
        
        fprintf('   ‚úÖ Limpeza conclu√≠da\n');
        
        % Resumo final
        fprintf('\n=== RESUMO DA VALIDA√á√ÉO ===\n');
        fprintf('‚úÖ ComparisonController: Inicializa√ß√£o OK\n');
        fprintf('‚úÖ ExecutionManager: Funcionalidades b√°sicas OK\n');
        fprintf('‚úÖ ReportGenerator: Interpreta√ß√£o autom√°tica OK\n');
        fprintf('‚úÖ ResourceMonitor: Monitoramento de recursos OK\n');
        fprintf('‚úÖ Integra√ß√£o: Componentes funcionando em conjunto\n');
        
        fprintf('\nüéâ VALIDA√á√ÉO CONCLU√çDA COM SUCESSO!\n');
        fprintf('O sistema de compara√ß√£o automatizada est√° pronto para uso.\n');
        
    catch ME
        fprintf('\n‚ùå ERRO NA VALIDA√á√ÉO:\n');
        fprintf('Mensagem: %s\n', ME.message);
        
        if ~isempty(ME.stack)
            fprintf('Local: %s (linha %d)\n', ME.stack(1).name, ME.stack(1).line);
        end
        
        fprintf('\nüí° Sugest√µes:\n');
        fprintf('- Verifique se todos os arquivos foram criados corretamente\n');
        fprintf('- Confirme que os diret√≥rios de dados existem\n');
        fprintf('- Execute o script novamente ap√≥s corrigir os problemas\n');
        
        rethrow(ME);
    end
end