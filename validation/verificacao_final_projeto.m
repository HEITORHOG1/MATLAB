function verificacao_final_projeto()
% VERIFICA√á√ÉO FINAL DO PROJETO
% Script para validar que o projeto est√° 100% funcional
%
% Execute este script antes de usar o projeto em uma nova m√°quina
% ou ap√≥s fazer altera√ß√µes significativas.

    fprintf('\nüîç VERIFICA√á√ÉO FINAL DO PROJETO U-Net vs Attention U-Net\n');
    fprintf('========================================================\n\n');
    
    % Contador de verifica√ß√µes
    total_verificacoes = 0;
    verificacoes_ok = 0;
    
    % 1. Verificar arquivos essenciais
    fprintf('1Ô∏è‚É£  Verificando arquivos essenciais...\n');
    arquivos_essenciais = {
        'executar_comparacao.m'
        'configurar_caminhos.m'
        'carregar_dados_robustos.m'
        'preprocessDataCorrigido.m'
        'preprocessDataMelhorado.m'
        'treinar_unet_simples.m'
        'create_working_attention_unet.m'
        'comparacao_unet_attention_final.m'
        'analisar_mascaras_automatico.m'
        'converter_mascaras.m'
        'executar_testes_completos.m'
    };
    
    arquivos_ok = true;
    for i = 1:length(arquivos_essenciais)
        if exist(arquivos_essenciais{i}, 'file')
            fprintf('   ‚úÖ %s\n', arquivos_essenciais{i});
        else
            fprintf('   ‚ùå %s - ARQUIVO AUSENTE!\n', arquivos_essenciais{i});
            arquivos_ok = false;
        end
    end
    total_verificacoes = total_verificacoes + 1;
    if arquivos_ok, verificacoes_ok = verificacoes_ok + 1; end
    
    % 2. Verificar configura√ß√£o
    fprintf('\n2Ô∏è‚É£  Verificando configura√ß√£o...\n');
    try
        if exist('config_caminhos.mat', 'file')
            config = load('config_caminhos.mat');
            fprintf('   ‚úÖ Arquivo de configura√ß√£o encontrado\n');
            
            % Verificar campos obrigat√≥rios
            campos_obrigatorios = {'imageDir', 'maskDir', 'inputSize'};
            config_ok = true;
            for i = 1:length(campos_obrigatorios)
                if isfield(config.config, campos_obrigatorios{i})
                    fprintf('   ‚úÖ Campo %s presente\n', campos_obrigatorios{i});
                else
                    fprintf('   ‚ùå Campo %s ausente\n', campos_obrigatorios{i});
                    config_ok = false;
                end
            end
        else
            fprintf('   ‚ö†Ô∏è  Arquivo de configura√ß√£o n√£o encontrado\n');
            fprintf('   ‚ÑπÔ∏è  Execute configurar_caminhos() na primeira vez\n');
            config_ok = true; % N√£o √© erro cr√≠tico
        end
    catch ME
        fprintf('   ‚ùå Erro ao verificar configura√ß√£o: %s\n', ME.message);
        config_ok = false;
    end
    total_verificacoes = total_verificacoes + 1;
    if config_ok, verificacoes_ok = verificacoes_ok + 1; end
    
    % 3. Testar fun√ß√µes principais
    fprintf('\n3Ô∏è‚É£  Testando fun√ß√µes principais...\n');
    funcoes_ok = true;
    
    try
        % Testar configurar_caminhos
        fprintf('   üîß Testando configurar_caminhos...\n');
        help('configurar_caminhos');
        fprintf('   ‚úÖ configurar_caminhos OK\n');
    catch ME
        fprintf('   ‚ùå Erro em configurar_caminhos: %s\n', ME.message);
        funcoes_ok = false;
    end
    
    try
        % Testar executar_comparacao
        fprintf('   üîß Testando executar_comparacao...\n');
        help('executar_comparacao');
        fprintf('   ‚úÖ executar_comparacao OK\n');
    catch ME
        fprintf('   ‚ùå Erro em executar_comparacao: %s\n', ME.message);
        funcoes_ok = false;
    end
    
    total_verificacoes = total_verificacoes + 1;
    if funcoes_ok, verificacoes_ok = verificacoes_ok + 1; end
    
    % 4. Verificar Deep Learning Toolbox
    fprintf('\n4Ô∏è‚É£  Verificando Deep Learning Toolbox...\n');
    try
        % Tentar criar uma camada simples
        convolution2dLayer(3, 64);
        fprintf('   ‚úÖ Deep Learning Toolbox dispon√≠vel\n');
        dl_ok = true;
    catch ME
        fprintf('   ‚ùå Deep Learning Toolbox n√£o dispon√≠vel: %s\n', ME.message);
        fprintf('   ‚ö†Ô∏è  ATEN√á√ÉO: Este toolbox √© obrigat√≥rio para o projeto!\n');
        dl_ok = false;
    end
    total_verificacoes = total_verificacoes + 1;
    if dl_ok, verificacoes_ok = verificacoes_ok + 1; end
    
    % 5. Testar cria√ß√£o de rede simples
    fprintf('\n5Ô∏è‚É£  Testando cria√ß√£o de arquitetura...\n');
    try
        % Criar uma U-Net simples para teste
        layers = [
            imageInputLayer([64 64 3])
            convolution2dLayer(3, 64, 'Padding', 'same')
            reluLayer
            convolution2dLayer(1, 2, 'Padding', 'same')
            softmaxLayer
            pixelClassificationLayer
        ];
        layerGraph(layers);
        fprintf('   ‚úÖ Cria√ß√£o de arquitetura funcionando\n');
        arquitetura_ok = true;
    catch ME
        fprintf('   ‚ùå Erro na cria√ß√£o de arquitetura: %s\n', ME.message);
        arquitetura_ok = false;
    end
    total_verificacoes = total_verificacoes + 1;
    if arquitetura_ok, verificacoes_ok = verificacoes_ok + 1; end
    
    % 6. Verificar scripts de teste
    fprintf('\n6Ô∏è‚É£  Verificando scripts de teste...\n');
    scripts_teste = {
        'executar_testes_completos.m'
        'teste_final_integridade.m' 
        'teste_projeto_automatizado.m'
        'teste_treinamento_rapido.m'
    };
    
    teste_ok = true;
    for i = 1:length(scripts_teste)
        if exist(scripts_teste{i}, 'file')
            fprintf('   ‚úÖ %s\n', scripts_teste{i});
        else
            fprintf('   ‚ùå %s - ARQUIVO AUSENTE!\n', scripts_teste{i});
            teste_ok = false;
        end
    end
    total_verificacoes = total_verificacoes + 1;
    if teste_ok, verificacoes_ok = verificacoes_ok + 1; end
    
    % RESULTADO FINAL
    fprintf('\n========================================================\n');
    fprintf('üìä RESULTADO DA VERIFICA√á√ÉO FINAL\n');
    fprintf('========================================================\n');
    
    taxa_sucesso = (verificacoes_ok / total_verificacoes) * 100;
    
    fprintf('Verifica√ß√µes realizadas: %d\n', total_verificacoes);
    fprintf('Verifica√ß√µes aprovadas: %d\n', verificacoes_ok);
    fprintf('Taxa de sucesso: %.1f%%\n\n', taxa_sucesso);
    
    if verificacoes_ok == total_verificacoes
        fprintf('üéâ TODAS AS VERIFICA√á√ïES PASSARAM!\n');
        fprintf('‚úÖ Projeto est√° 100%% pronto para uso\n\n');
        fprintf('üöÄ PR√ìXIMOS PASSOS:\n');
        fprintf('   1. Execute: executar_comparacao()\n');
        fprintf('   2. Configure seus dados\n');
        fprintf('   3. Escolha uma op√ß√£o do menu\n\n');
    else
        fprintf('‚ö†Ô∏è  ALGUMAS VERIFICA√á√ïES FALHARAM!\n');
        fprintf('‚ùå Corrija os problemas antes de usar o projeto\n\n');
        fprintf('üîß SOLU√á√ïES SUGERIDAS:\n');
        
        if ~arquivos_ok
            fprintf('   - Verifique se todos os arquivos est√£o presentes\n');
        end
        if ~dl_ok
            fprintf('   - Instale o Deep Learning Toolbox\n');
        end
        if ~funcoes_ok || ~arquitetura_ok
            fprintf('   - Verifique compatibilidade da vers√£o do MATLAB\n');
        end
        fprintf('\n');
    end
    
    % Salvar log da verifica√ß√£o
    timestamp = datestr(now, 'yyyy-mm-dd_HH-MM-SS');
    log_file = sprintf('verificacao_final_%s.txt', timestamp);
    
    fprintf('üìù Log da verifica√ß√£o salvo em: %s\n', log_file);
    fprintf('========================================================\n\n');
    
end
