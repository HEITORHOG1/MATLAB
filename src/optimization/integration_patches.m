%% Integration Patches - Monitoramento de Otimização
% Este arquivo contém patches para integrar o sistema de monitoramento
% com os scripts de treinamento existentes.

%% Patch para treinar_unet_simples_enhanced.m
function patch_treinar_unet_simples_enhanced()
    fprintf('=== PATCH: treinar_unet_simples_enhanced.m ===\n');
    
    % Ler arquivo original
    originalFile = 'utils/treinar_unet_simples_enhanced.m';
    if ~exist(originalFile, 'file')
        fprintf('Arquivo original não encontrado: %s\n', originalFile);
        return;
    end
    
    % Criar versão com monitoramento
    patchedFile = 'utils/treinar_unet_simples_enhanced_monitored.m';
    
    % Ler conteúdo original
    fid = fopen(originalFile, 'r');
    if fid == -1
        fprintf('Erro ao abrir arquivo original\n');
        return;
    end
    
    originalContent = fread(fid, '*char')';
    fclose(fid);
    
    % Criar conteúdo modificado
    patchedContent = addMonitoringToTrainingScript(originalContent, 'unet');
    
    % Salvar versão modificada
    fid = fopen(patchedFile, 'w');
    if fid == -1
        fprintf('Erro ao criar arquivo modificado\n');
        return;
    end
    
    fprintf(fid, '%s', patchedContent);
    fclose(fid);
    
    fprintf('Patch criado: %s\n', patchedFile);
end

%% Patch para comparacao_unet_attention_final.m
function patch_comparacao_unet_attention()
    fprintf('=== PATCH: comparacao_unet_attention_final.m ===\n');
    
    % Ler arquivo original
    originalFile = 'legacy/comparacao_unet_attention_final.m';
    if ~exist(originalFile, 'file')
        fprintf('Arquivo original não encontrado: %s\n', originalFile);
        return;
    end
    
    % Criar versão com monitoramento
    patchedFile = 'legacy/comparacao_unet_attention_final_monitored.m';
    
    % Ler conteúdo original
    fid = fopen(originalFile, 'r');
    if fid == -1
        fprintf('Erro ao abrir arquivo original\n');
        return;
    end
    
    originalContent = fread(fid, '*char')';
    fclose(fid);
    
    % Criar conteúdo modificado
    patchedContent = addMonitoringToComparisonScript(originalContent);
    
    % Salvar versão modificada
    fid = fopen(patchedFile, 'w');
    if fid == -1
        fprintf('Erro ao criar arquivo modificado\n');
        return;
    end
    
    fprintf(fid, '%s', patchedContent);
    fclose(fid);
    
    fprintf('Patch criado: %s\n', patchedFile);
end

%% Função para adicionar monitoramento a scripts de treinamento
function modifiedContent = addMonitoringToTrainingScript(originalContent, modelType)
    
    % Adicionar imports no início
    imports = sprintf([
        '%% Adicionar monitoramento de otimização\n'...
        'addpath(''src/optimization'');\n'...
        '\n'...
        '%% Inicializar sistema de monitoramento\n'...
        'fprintf(''Inicializando sistema de monitoramento...\\n'');\n'...
        'monitoringDir = fullfile(''output'', ''monitoring'', datestr(now, ''yyyymmdd_HHMMSS''));\n'...
        'if ~exist(monitoringDir, ''dir'')\n'...
        '    mkdir(monitoringDir);\n'...
        'end\n'...
        '\n'...
        'trainingConfig = struct();\n'...
        'trainingConfig.learning_rate = initialLearnRate;\n'...
        'trainingConfig.batch_size = miniBatchSize;\n'...
        'trainingConfig.optimizer = ''adam'';\n'...
        'trainingConfig.model_type = ''%s'';\n'...
        '\n'...
        'integration = TrainingIntegration(''SaveDirectory'', monitoringDir, ...\n'...
        '                                 ''VerboseMode'', true, ...\n'...
        '                                 ''AlertsEnabled'', true);\n'...
        '\n'], modelType);
    
    % Encontrar onde a rede é criada e adicionar setup do monitoramento
    setupMonitoring = sprintf([
        '\n%% Configurar monitoramento após criação da rede\n'...
        'try\n'...
        '    integration.setupMonitoring(net, trainingConfig);\n'...
        '    fprintf(''Monitoramento configurado com sucesso\\n'');\n'...
        'catch ME\n'...
        '    warning(''Falha ao configurar monitoramento: %%s'', ME.message);\n'...
        'end\n\n']);
    
    % Adicionar registro de época no loop de treinamento
    epochRecording = sprintf([
        '\n        %% Registrar época no sistema de monitoramento\n'...
        '        try\n'...
        '            epochMetrics = struct();\n'...
        '            epochMetrics.loss = info.TrainingLoss(end);\n'...
        '            if ~isempty(info.ValidationLoss)\n'...
        '                epochMetrics.validation_loss = info.ValidationLoss(end);\n'...
        '            end\n'...
        '            if isfield(info, ''TrainingAccuracy'')\n'...
        '                epochMetrics.accuracy = info.TrainingAccuracy(end);\n'...
        '            end\n'...
        '            if isfield(info, ''ValidationAccuracy'')\n'...
        '                epochMetrics.validation_accuracy = info.ValidationAccuracy(end);\n'...
        '            end\n'...
        '            \n'...
        '            integration.recordEpoch(net, epoch, epochMetrics);\n'...
        '        catch ME\n'...
        '            warning(''Falha ao registrar época %%d: %%s'', epoch, ME.message);\n'...
        '        end\n']);
    
    % Adicionar análise final
    finalAnalysis = sprintf([
        '\n%% Análise final de otimização\n'...
        'try\n'...
        '    fprintf(''Gerando análise final de otimização...\\n'');\n'...
        '    \n'...
        '    %% Obter sugestões\n'...
        '    suggestions = integration.getSuggestions();\n'...
        '    \n'...
        '    %% Gerar relatório\n'...
        '    report = integration.generateReport();\n'...
        '    \n'...
        '    %% Gerar gráficos\n'...
        '    integration.plotTrainingProgress();\n'...
        '    \n'...
        '    %% Salvar progresso final\n'...
        '    integration.saveProgress();\n'...
        '    \n'...
        '    %% Exibir resumo\n'...
        '    summary = integration.getTrainingSummary();\n'...
        '    fprintf(''\\n=== RESUMO DO MONITORAMENTO ===\\n'');\n'...
        '    fprintf(''Épocas monitoradas: %%d\\n'', summary.total_epochs);\n'...
        '    if isfield(summary, ''final_loss'')\n'...
        '        fprintf(''Loss final: %%.4f\\n'', summary.final_loss);\n'...
        '    end\n'...
        '    if isfield(summary, ''optimization_issues'')\n'...
        '        fprintf(''Problemas detectados: %%d\\n'', summary.optimization_issues);\n'...
        '    end\n'...
        '    fprintf(''Arquivos salvos em: %%s\\n'', monitoringDir);\n'...
        '    fprintf(''==============================\\n\\n'');\n'...
        '    \n'...
        'catch ME\n'...
        '    warning(''Falha na análise final: %%s'', ME.message);\n'...
        'end\n\n']);
    
    % Modificar conteúdo
    modifiedContent = originalContent;
    
    % Adicionar imports no início (após comentários iniciais)
    firstFunctionPos = strfind(modifiedContent, 'function');
    if ~isempty(firstFunctionPos)
        insertPos = firstFunctionPos(1) - 1;
    else
        insertPos = 1;
    end
    
    modifiedContent = [modifiedContent(1:insertPos-1), imports, modifiedContent(insertPos:end)];
    
    % Adicionar setup após criação da rede
    netCreationPatterns = {'net = trainNetwork', 'network = trainNetwork', 'lgraph = layerGraph'};
    for pattern = netCreationPatterns
        pos = strfind(modifiedContent, pattern{1});
        if ~isempty(pos)
            % Encontrar fim da linha
            lineEnd = strfind(modifiedContent(pos(1):end), newline);
            if ~isempty(lineEnd)
                insertPos = pos(1) + lineEnd(1);
                modifiedContent = [modifiedContent(1:insertPos-1), setupMonitoring, modifiedContent(insertPos:end)];
                break;
            end
        end
    end
    
    % Adicionar registro de época no loop de treinamento
    % Procurar por padrões de loop de época
    loopPatterns = {'for epoch = ', 'for i = 1:maxEpochs', 'while epoch <'};
    for pattern = loopPatterns
        pos = strfind(modifiedContent, pattern{1});
        if ~isempty(pos)
            % Encontrar fim do loop (procurar por 'end')
            loopStart = pos(1);
            endPos = strfind(modifiedContent(loopStart:end), 'end');
            if ~isempty(endPos)
                insertPos = loopStart + endPos(1) - 5; % Antes do 'end'
                modifiedContent = [modifiedContent(1:insertPos-1), epochRecording, modifiedContent(insertPos:end)];
                break;
            end
        end
    end
    
    % Adicionar análise final no fim
    modifiedContent = [modifiedContent, finalAnalysis];
end

%% Função para adicionar monitoramento a scripts de comparação
function modifiedContent = addMonitoringToComparisonScript(originalContent)
    
    % Adicionar imports e configuração inicial
    imports = sprintf([
        '%% Adicionar monitoramento de otimização para comparação\n'...
        'addpath(''src/optimization'');\n'...
        '\n'...
        '%% Configurar monitoramento para ambos os modelos\n'...
        'monitoringDir = fullfile(''output'', ''comparison_monitoring'', datestr(now, ''yyyymmdd_HHMMSS''));\n'...
        'if ~exist(monitoringDir, ''dir'')\n'...
        '    mkdir(monitoringDir);\n'...
        'end\n'...
        '\n'...
        'unetMonitoringDir = fullfile(monitoringDir, ''unet'');\n'...
        'attentionMonitoringDir = fullfile(monitoringDir, ''attention_unet'');\n'...
        'mkdir(unetMonitoringDir);\n'...
        'mkdir(attentionMonitoringDir);\n'...
        '\n']);
    
    % Configuração para U-Net
    unetSetup = sprintf([
        '\n%% Configurar monitoramento para U-Net\n'...
        'unetConfig = struct();\n'...
        'unetConfig.learning_rate = initialLearnRate;\n'...
        'unetConfig.batch_size = miniBatchSize;\n'...
        'unetConfig.optimizer = ''adam'';\n'...
        'unetConfig.model_type = ''unet'';\n'...
        '\n'...
        'unetIntegration = TrainingIntegration(''SaveDirectory'', unetMonitoringDir, ...\n'...
        '                                     ''VerboseMode'', true, ...\n'...
        '                                     ''AlertsEnabled'', true);\n'...
        '\n'...
        'try\n'...
        '    unetIntegration.setupMonitoring(unet, unetConfig);\n'...
        '    fprintf(''Monitoramento U-Net configurado\\n'');\n'...
        'catch ME\n'...
        '    warning(''Falha ao configurar monitoramento U-Net: %%s'', ME.message);\n'...
        'end\n\n']);
    
    % Configuração para Attention U-Net
    attentionSetup = sprintf([
        '\n%% Configurar monitoramento para Attention U-Net\n'...
        'attentionConfig = struct();\n'...
        'attentionConfig.learning_rate = initialLearnRate;\n'...
        'attentionConfig.batch_size = miniBatchSize;\n'...
        'attentionConfig.optimizer = ''adam'';\n'...
        'attentionConfig.model_type = ''attention_unet'';\n'...
        '\n'...
        'attentionIntegration = TrainingIntegration(''SaveDirectory'', attentionMonitoringDir, ...\n'...
        '                                          ''VerboseMode'', true, ...\n'...
        '                                          ''AlertsEnabled'', true);\n'...
        '\n'...
        'try\n'...
        '    attentionIntegration.setupMonitoring(attentionUnet, attentionConfig);\n'...
        '    fprintf(''Monitoramento Attention U-Net configurado\\n'');\n'...
        'catch ME\n'...
        '    warning(''Falha ao configurar monitoramento Attention U-Net: %%s'', ME.message);\n'...
        'end\n\n']);
    
    % Análise comparativa final
    comparativeAnalysis = sprintf([
        '\n%% Análise comparativa de otimização\n'...
        'try\n'...
        '    fprintf(''\\n=== ANÁLISE COMPARATIVA DE OTIMIZAÇÃO ===\\n'');\n'...
        '    \n'...
        '    %% Análise U-Net\n'...
        '    fprintf(''\\nU-Net:\\n'');\n'...
        '    unetSuggestions = unetIntegration.getSuggestions();\n'...
        '    unetReport = unetIntegration.generateReport();\n'...
        '    unetSummary = unetIntegration.getTrainingSummary();\n'...
        '    \n'...
        '    fprintf(''  Épocas: %%d\\n'', unetSummary.total_epochs);\n'...
        '    if isfield(unetSummary, ''final_loss'')\n'...
        '        fprintf(''  Loss final: %%.4f\\n'', unetSummary.final_loss);\n'...
        '    end\n'...
        '    if isfield(unetSummary, ''optimization_issues'')\n'...
        '        fprintf(''  Problemas: %%d\\n'', unetSummary.optimization_issues);\n'...
        '    end\n'...
        '    \n'...
        '    %% Análise Attention U-Net\n'...
        '    fprintf(''\\nAttention U-Net:\\n'');\n'...
        '    attentionSuggestions = attentionIntegration.getSuggestions();\n'...
        '    attentionReport = attentionIntegration.generateReport();\n'...
        '    attentionSummary = attentionIntegration.getTrainingSummary();\n'...
        '    \n'...
        '    fprintf(''  Épocas: %%d\\n'', attentionSummary.total_epochs);\n'...
        '    if isfield(attentionSummary, ''final_loss'')\n'...
        '        fprintf(''  Loss final: %%.4f\\n'', attentionSummary.final_loss);\n'...
        '    end\n'...
        '    if isfield(attentionSummary, ''optimization_issues'')\n'...
        '        fprintf(''  Problemas: %%d\\n'', attentionSummary.optimization_issues);\n'...
        '    end\n'...
        '    \n'...
        '    %% Gerar gráficos comparativos\n'...
        '    figure(''Name'', ''Comparação de Otimização'', ''Position'', [100, 100, 1400, 600]);\n'...
        '    \n'...
        '    subplot(1, 2, 1);\n'...
        '    unetIntegration.plotTrainingProgress(''SavePlots'', false, ''ShowPlots'', false);\n'...
        '    title(''U-Net - Progresso de Treinamento'');\n'...
        '    \n'...
        '    subplot(1, 2, 2);\n'...
        '    attentionIntegration.plotTrainingProgress(''SavePlots'', false, ''ShowPlots'', false);\n'...
        '    title(''Attention U-Net - Progresso de Treinamento'');\n'...
        '    \n'...
        '    %% Salvar gráfico comparativo\n'...
        '    comparisonPlotFile = fullfile(monitoringDir, ''optimization_comparison.png'');\n'...
        '    saveas(gcf, comparisonPlotFile);\n'...
        '    fprintf(''\\nGráfico comparativo salvo: %%s\\n'', comparisonPlotFile);\n'...
        '    \n'...
        '    %% Salvar dados de ambos os modelos\n'...
        '    unetIntegration.saveProgress();\n'...
        '    attentionIntegration.saveProgress();\n'...
        '    \n'...
        '    %% Criar relatório comparativo\n'...
        '    comparisonData = struct();\n'...
        '    comparisonData.unet = unetSummary;\n'...
        '    comparisonData.attention_unet = attentionSummary;\n'...
        '    comparisonData.unet_suggestions = unetSuggestions;\n'...
        '    comparisonData.attention_suggestions = attentionSuggestions;\n'...
        '    comparisonData.timestamp = now;\n'...
        '    \n'...
        '    comparisonFile = fullfile(monitoringDir, ''comparison_analysis.mat'');\n'...
        '    save(comparisonFile, ''comparisonData'', ''-v7.3'');\n'...
        '    \n'...
        '    fprintf(''\\nArquivos de monitoramento salvos em: %%s\\n'', monitoringDir);\n'...
        '    fprintf(''=========================================\\n\\n'');\n'...
        '    \n'...
        'catch ME\n'...
        '    warning(''Falha na análise comparativa: %%s'', ME.message);\n'...
        'end\n\n']);
    
    % Modificar conteúdo
    modifiedContent = originalContent;
    
    % Adicionar imports no início
    firstFunctionPos = strfind(modifiedContent, 'function');
    if ~isempty(firstFunctionPos)
        insertPos = firstFunctionPos(1) - 1;
    else
        insertPos = 1;
    end
    
    modifiedContent = [modifiedContent(1:insertPos-1), imports, modifiedContent(insertPos:end)];
    
    % Adicionar configuração após criação das redes
    % Procurar por criação da U-Net
    unetPos = strfind(modifiedContent, 'unet = ');
    if ~isempty(unetPos)
        lineEnd = strfind(modifiedContent(unetPos(1):end), newline);
        if ~isempty(lineEnd)
            insertPos = unetPos(1) + lineEnd(1);
            modifiedContent = [modifiedContent(1:insertPos-1), unetSetup, modifiedContent(insertPos:end)];
        end
    end
    
    % Procurar por criação da Attention U-Net
    attentionPos = strfind(modifiedContent, 'attentionUnet = ');
    if ~isempty(attentionPos)
        lineEnd = strfind(modifiedContent(attentionPos(1):end), newline);
        if ~isempty(lineEnd)
            insertPos = attentionPos(1) + lineEnd(1);
            modifiedContent = [modifiedContent(1:insertPos-1), attentionSetup, modifiedContent(insertPos:end)];
        end
    end
    
    % Adicionar análise final no fim
    modifiedContent = [modifiedContent, comparativeAnalysis];
end

%% Função principal para aplicar todos os patches
function applyAllPatches()
    fprintf('=== APLICANDO PATCHES DE INTEGRAÇÃO ===\n\n');
    
    try
        patch_treinar_unet_simples_enhanced();
    catch ME
        fprintf('Erro no patch treinar_unet_simples_enhanced: %s\n', ME.message);
    end
    
    try
        patch_comparacao_unet_attention();
    catch ME
        fprintf('Erro no patch comparacao_unet_attention: %s\n', ME.message);
    end
    
    fprintf('\n=== PATCHES APLICADOS ===\n');
    fprintf('Arquivos modificados criados com sufixo "_monitored"\n');
    fprintf('Use os novos arquivos para treinamento com monitoramento\n\n');
end

%% Executar patches se chamado diretamente
if ~exist('caller_function', 'var')
    applyAllPatches();
end