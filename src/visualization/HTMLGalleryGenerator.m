classdef HTMLGalleryGenerator < handle
    % HTMLGalleryGenerator - Gerador de galeria HTML interativa
    % 
    % Esta classe implementa funcionalidades para:
    % - Galeria HTML interativa com navegação e zoom
    % - Organização automática de imagens por sessão
    % - Interface responsiva com thumbnails
    % - Navegação por teclado e mouse
    
    properties
        outputDirectory
        templatePath
        galleryTitle
        imagesPerPage
        thumbnailSize
    end
    
    methods
        function obj = HTMLGalleryGenerator(varargin)
            % Constructor - Inicializa o gerador de galeria HTML
            %
            % Uso:
            %   generator = HTMLGalleryGenerator()
            %   generator = HTMLGalleryGenerator('outputDir', 'gallery/')
            
            % Parse input arguments
            p = inputParser;
            addParameter(p, 'outputDir', 'output/gallery/', @ischar);
            addParameter(p, 'galleryTitle', 'Galeria de Comparações', @ischar);
            addParameter(p, 'imagesPerPage', 20, @isnumeric);
            addParameter(p, 'thumbnailSize', 200, @isnumeric);
            parse(p, varargin{:});
            
            obj.outputDirectory = p.Results.outputDir;
            obj.galleryTitle = p.Results.galleryTitle;
            obj.imagesPerPage = p.Results.imagesPerPage;
            obj.thumbnailSize = p.Results.thumbnailSize;
            
            % Criar diretório de saída se não existir
            if ~exist(obj.outputDirectory, 'dir')
                mkdir(obj.outputDirectory);
            end
        end
        
        function galleryPath = generateComparisonGallery(obj, allResults, varargin)
            % Gera galeria HTML interativa com múltiplas imagens
            %
            % Inputs:
            %   allResults - Cell array com resultados de comparação
            %
            % Output:
            %   galleryPath - Caminho do arquivo HTML gerado
            
            % Parse optional arguments
            p = inputParser;
            addParameter(p, 'sessionId', datestr(now, 'yyyymmdd_HHMMSS'), @ischar);
            addParameter(p, 'includeMetrics', true, @islogical);
            parse(p, varargin{:});
            
            try
                % Criar estrutura de diretórios
                sessionDir = fullfile(obj.outputDirectory, p.Results.sessionId);
                if ~exist(sessionDir, 'dir')
                    mkdir(sessionDir);
                end
                
                imagesDir = fullfile(sessionDir, 'images');
                if ~exist(imagesDir, 'dir')
                    mkdir(imagesDir);
                end
                
                thumbnailsDir = fullfile(sessionDir, 'thumbnails');
                if ~exist(thumbnailsDir, 'dir')
                    mkdir(thumbnailsDir);
                end
                
                % Processar todas as imagens
                imageData = obj.processImages(allResults, imagesDir, thumbnailsDir, p.Results.includeMetrics);
                
                % Gerar HTML
                htmlContent = obj.generateHTML(imageData, p.Results.sessionId);
                
                % Salvar arquivo HTML
                galleryPath = fullfile(sessionDir, 'index.html');
                fid = fopen(galleryPath, 'w');
                if fid == -1
                    error('Não foi possível criar arquivo HTML: %s', galleryPath);
                end
                
                fprintf(fid, '%s', htmlContent);
                fclose(fid);
                
                % Copiar arquivos CSS e JS
                obj.copyAssets(sessionDir);
                
                fprintf('Galeria HTML gerada em: %s\n', galleryPath);
                
            catch ME
                error('Erro ao gerar galeria HTML: %s', ME.message);
            end
        end
        
        function imageData = processImages(obj, allResults, imagesDir, thumbnailsDir, includeMetrics)
            % Processa imagens e cria thumbnails
            
            imageData = {};
            
            for i = 1:length(allResults)
                result = allResults{i};
                
                % Copiar imagem original para diretório da galeria
                [~, name, ext] = fileparts(result.imagePath);
                newImagePath = fullfile(imagesDir, [name ext]);
                copyfile(result.imagePath, newImagePath);
                
                % Criar thumbnail
                thumbnailPath = fullfile(thumbnailsDir, [name '_thumb' ext]);
                obj.createThumbnail(result.imagePath, thumbnailPath);
                
                % Preparar dados da imagem
                imageInfo = struct();
                imageInfo.name = name;
                imageInfo.imagePath = ['images/' name ext];
                imageInfo.thumbnailPath = ['thumbnails/' name '_thumb' ext];
                
                if includeMetrics && isfield(result, 'metrics')
                    imageInfo.metrics = result.metrics;
                end
                
                if isfield(result, 'comparisonPath')
                    % Copiar imagem de comparação
                    [~, compName, compExt] = fileparts(result.comparisonPath);
                    newCompPath = fullfile(imagesDir, [compName compExt]);
                    copyfile(result.comparisonPath, newCompPath);
                    imageInfo.comparisonPath = ['images/' compName compExt];
                end
                
                imageData{end+1} = imageInfo;
            end
        end
        
        function createThumbnail(obj, imagePath, thumbnailPath)
            % Cria thumbnail da imagem
            
            try
                img = imread(imagePath);
                
                % Redimensionar mantendo proporção
                [h, w, ~] = size(img);
                if h > w
                    newH = obj.thumbnailSize;
                    newW = round(w * newH / h);
                else
                    newW = obj.thumbnailSize;
                    newH = round(h * newW / w);
                end
                
                thumbnail = imresize(img, [newH, newW]);
                imwrite(thumbnail, thumbnailPath);
                
            catch ME
                warning('Erro ao criar thumbnail para %s: %s', imagePath, ME.message);
            end
        end
        
        function htmlContent = generateHTML(obj, imageData, sessionId)
            % Gera conteúdo HTML da galeria
            
            htmlContent = sprintf(['<!DOCTYPE html>\n' ...
                '<html lang="pt-BR">\n' ...
                '<head>\n' ...
                '    <meta charset="UTF-8">\n' ...
                '    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n' ...
                '    <title>%s - %s</title>\n' ...
                '    <link rel="stylesheet" href="gallery.css">\n' ...
                '</head>\n' ...
                '<body>\n' ...
                '    <header>\n' ...
                '        <h1>%s</h1>\n' ...
                '        <p>Sessão: %s | Total de imagens: %d</p>\n' ...
                '    </header>\n' ...
                '    <main>\n' ...
                '        <div class="gallery-container">\n'], ...
                obj.galleryTitle, sessionId, obj.galleryTitle, sessionId, length(imageData));
            
            % Adicionar imagens
            for i = 1:length(imageData)
                img = imageData{i};
                
                htmlContent = [htmlContent sprintf(['            <div class="gallery-item" data-index="%d">\n' ...
                    '                <img src="%s" alt="%s" class="thumbnail" onclick="openModal(%d)">\n' ...
                    '                <div class="image-info">\n' ...
                    '                    <h3>%s</h3>\n'], ...
                    i-1, img.thumbnailPath, img.name, i-1, img.name)];
                
                % Adicionar métricas se disponíveis
                if isfield(img, 'metrics')
                    htmlContent = [htmlContent sprintf(['                    <div class="metrics">\n' ...
                        '                        <span>IoU: %.3f</span>\n' ...
                        '                        <span>Dice: %.3f</span>\n' ...
                        '                    </div>\n'], ...
                        img.metrics.iou, img.metrics.dice)];
                end
                
                htmlContent = [htmlContent '                </div>\n            </div>\n'];
            end
            
            % Fechar container da galeria
            htmlContent = [htmlContent '        </div>\n    </main>\n'];
            
            % Adicionar modal para visualização ampliada
            htmlContent = [htmlContent obj.generateModalHTML(imageData)];
            
            % Fechar HTML
            htmlContent = [htmlContent ['    <script src="gallery.js"></script>\n' ...
                '</body>\n' ...
                '</html>\n']];
        end
        
        function modalHTML = generateModalHTML(obj, imageData)
            % Gera HTML do modal para visualização ampliada
            
            modalHTML = ['    <!-- Modal para visualização ampliada -->\n' ...
                '    <div id="imageModal" class="modal">\n' ...
                '        <div class="modal-content">\n' ...
                '            <span class="close" onclick="closeModal()">&times;</span>\n' ...
                '            <div class="modal-navigation">\n' ...
                '                <button class="nav-btn prev" onclick="previousImage()">&#8249;</button>\n' ...
                '                <button class="nav-btn next" onclick="nextImage()">&#8250;</button>\n' ...
                '            </div>\n' ...
                '            <div class="modal-image-container">\n' ...
                '                <img id="modalImage" src="" alt="">\n' ...
                '            </div>\n' ...
                '            <div class="modal-info">\n' ...
                '                <h3 id="modalTitle"></h3>\n' ...
                '                <div id="modalMetrics"></div>\n' ...
                '            </div>\n' ...
                '        </div>\n' ...
                '    </div>\n\n'];
            
            % Adicionar dados das imagens como JavaScript
            modalHTML = [modalHTML '    <script>\n        const imageData = [\n'];
            
            for i = 1:length(imageData)
                img = imageData{i};
                modalHTML = [modalHTML sprintf('            {\n                name: "%s",\n                imagePath: "%s",\n', ...
                    img.name, img.imagePath)];
                
                if isfield(img, 'metrics')
                    modalHTML = [modalHTML sprintf('                metrics: {iou: %.3f, dice: %.3f}\n', ...
                        img.metrics.iou, img.metrics.dice)];
                else
                    modalHTML = [modalHTML '                metrics: null\n'];
                end
                
                if i < length(imageData)
                    modalHTML = [modalHTML '            },\n'];
                else
                    modalHTML = [modalHTML '            }\n'];
                end
            end
            
            modalHTML = [modalHTML '        ];\n    </script>\n'];
        end
        
        function copyAssets(obj, sessionDir)
            % Copia arquivos CSS e JavaScript para o diretório da sessão
            
            % CSS
            cssContent = obj.generateCSS();
            cssPath = fullfile(sessionDir, 'gallery.css');
            fid = fopen(cssPath, 'w');
            fprintf(fid, '%s', cssContent);
            fclose(fid);
            
            % JavaScript
            jsContent = obj.generateJavaScript();
            jsPath = fullfile(sessionDir, 'gallery.js');
            fid = fopen(jsPath, 'w');
            fprintf(fid, '%s', jsContent);
            fclose(fid);
        end
        
        function cssContent = generateCSS(obj)
            % Gera conteúdo CSS para a galeria
            
            cssContent = ['/* Galeria de Comparações - CSS */\n' ...
                '* { margin: 0; padding: 0; box-sizing: border-box; }\n\n' ...
                'body { font-family: Arial, sans-serif; background-color: #f5f5f5; }\n\n' ...
                'header { background-color: #333; color: white; padding: 20px; text-align: center; }\n' ...
                'header h1 { margin-bottom: 10px; }\n\n' ...
                '.gallery-container { display: grid; grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)); gap: 20px; padding: 20px; }\n\n' ...
                '.gallery-item { background: white; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1); overflow: hidden; transition: transform 0.3s; }\n' ...
                '.gallery-item:hover { transform: translateY(-5px); }\n\n' ...
                '.thumbnail { width: 100%; height: 200px; object-fit: cover; cursor: pointer; }\n\n' ...
                '.image-info { padding: 15px; }\n' ...
                '.image-info h3 { margin-bottom: 10px; color: #333; }\n\n' ...
                '.metrics { display: flex; gap: 10px; }\n' ...
                '.metrics span { background-color: #007bff; color: white; padding: 4px 8px; border-radius: 4px; font-size: 12px; }\n\n' ...
                '/* Modal Styles */\n' ...
                '.modal { display: none; position: fixed; z-index: 1000; left: 0; top: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.9); }\n\n' ...
                '.modal-content { position: relative; margin: auto; padding: 20px; width: 90%; max-width: 1200px; height: 90%; }\n\n' ...
                '.close { position: absolute; top: 15px; right: 35px; color: #f1f1f1; font-size: 40px; font-weight: bold; cursor: pointer; z-index: 1001; }\n' ...
                '.close:hover { color: #bbb; }\n\n' ...
                '.modal-navigation { position: absolute; top: 50%; transform: translateY(-50%); z-index: 1001; }\n' ...
                '.nav-btn { background-color: rgba(255,255,255,0.8); border: none; font-size: 30px; padding: 10px 15px; cursor: pointer; border-radius: 5px; }\n' ...
                '.nav-btn:hover { background-color: rgba(255,255,255,1); }\n' ...
                '.prev { left: 20px; }\n' ...
                '.next { right: 20px; }\n\n' ...
                '.modal-image-container { text-align: center; height: 80%; }\n' ...
                '#modalImage { max-width: 100%; max-height: 100%; object-fit: contain; }\n\n' ...
                '.modal-info { text-align: center; color: white; margin-top: 20px; }\n' ...
                '#modalMetrics { margin-top: 10px; }\n' ...
                '#modalMetrics span { background-color: #007bff; color: white; padding: 8px 12px; margin: 0 5px; border-radius: 4px; }\n'];
        end
        
        function jsContent = generateJavaScript(obj)
            % Gera conteúdo JavaScript para a galeria
            
            jsContent = ['// Galeria de Comparações - JavaScript\n' ...
                'let currentImageIndex = 0;\n\n' ...
                'function openModal(index) {\n' ...
                '    currentImageIndex = index;\n' ...
                '    updateModalContent();\n' ...
                '    document.getElementById("imageModal").style.display = "block";\n' ...
                '}\n\n' ...
                'function closeModal() {\n' ...
                '    document.getElementById("imageModal").style.display = "none";\n' ...
                '}\n\n' ...
                'function nextImage() {\n' ...
                '    currentImageIndex = (currentImageIndex + 1) % imageData.length;\n' ...
                '    updateModalContent();\n' ...
                '}\n\n' ...
                'function previousImage() {\n' ...
                '    currentImageIndex = (currentImageIndex - 1 + imageData.length) % imageData.length;\n' ...
                '    updateModalContent();\n' ...
                '}\n\n' ...
                'function updateModalContent() {\n' ...
                '    const img = imageData[currentImageIndex];\n' ...
                '    document.getElementById("modalImage").src = img.imagePath;\n' ...
                '    document.getElementById("modalTitle").textContent = img.name;\n' ...
                '    \n' ...
                '    const metricsDiv = document.getElementById("modalMetrics");\n' ...
                '    if (img.metrics) {\n' ...
                '        metricsDiv.innerHTML = `<span>IoU: ${img.metrics.iou.toFixed(3)}</span><span>Dice: ${img.metrics.dice.toFixed(3)}</span>`;\n' ...
                '    } else {\n' ...
                '        metricsDiv.innerHTML = "";\n' ...
                '    }\n' ...
                '}\n\n' ...
                '// Navegação por teclado\n' ...
                'document.addEventListener("keydown", function(event) {\n' ...
                '    if (document.getElementById("imageModal").style.display === "block") {\n' ...
                '        if (event.key === "ArrowLeft") {\n' ...
                '            previousImage();\n' ...
                '        } else if (event.key === "ArrowRight") {\n' ...
                '            nextImage();\n' ...
                '        } else if (event.key === "Escape") {\n' ...
                '            closeModal();\n' ...
                '        }\n' ...
                '    }\n' ...
                '});\n\n' ...
                '// Fechar modal clicando fora da imagem\n' ...
                'document.getElementById("imageModal").addEventListener("click", function(event) {\n' ...
                '    if (event.target === this) {\n' ...
                '        closeModal();\n' ...
                '    }\n' ...
                '});\n'];
        end
    end
end